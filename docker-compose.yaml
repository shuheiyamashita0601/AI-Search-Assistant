# Docker Compose設定ファイル（共有イメージなしバージョン）
# 各サービスが独立してDockerfileを持つ構成

services:
  # PostgreSQL データベースサーバー
  postgres:
    image: postgres:17.5-alpine
    container_name: test-ai-search-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: test_ai_search_assistant
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: md5
    ports:
      - "5432:5432"
    volumes:
      # データ永続化
      - postgres_data:/var/lib/postgresql/data
      # バックアップ用
      - postgres_backups:/var/lib/postgresql/backups
      # 初期化スクリプト
      - ./database/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d test_ai_search_assistant"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network

  # Redis キャッシュサーバー
  redis:
    image: redis:7.4-alpine
    container_name: test-ai-search-redis
    restart: unless-stopped
    command: >
      redis-server 
      --appendonly yes 
      --requirepass redispassword
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redispassword", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # 共有型パッケージビルダー
  types:
    build:
      context: .
      dockerfile: ./packages/types/Dockerfile.dev
    container_name: test-ai-search-types
    restart: unless-stopped
    volumes:
      # コンパイル結果の共有
      - types_dist:/app/dist
      # ソースコードの監視（読み取り専用）
      - ./packages/types/src:/app/src:ro
      - ./packages/types/tsconfig.json:/app/tsconfig.json:ro
    # 依存関係を削除（独立して起動）
    networks:
      - app-network

  # バックエンドAPIサーバー
  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile.dev
    container_name: test-ai-search-backend
    restart: unless-stopped
    environment:
      # 基本設定
      NODE_ENV: development
      PORT: 3001
      SERVICE_NAME: backend
      
      # ホットリロード設定
      CHOKIDAR_USEPOLLING: true
      WATCHPACK_POLLING: true
      
      # データベース接続
      DATABASE_URL: postgresql://postgres:password@postgres:5432/test_ai_search_assistant
      
      # Redis接続
      REDIS_URL: redis://:redispassword@redis:6379
      
      # CORS設定
      FRONTEND_URL: http://frontend:3000
      
      # セキュリティ設定
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-86400}
      
      # 外部API
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_ORGANIZATION: ${OPENAI_ORGANIZATION:-}
      
      # ログ設定
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FILE_PATH: /app/logs/app.log
    ports:
      - "3001:3001"
    volumes:
      # ソースコードのホットリロード（読み書き可能に変更）
      - ./backend/src:/app/backend/src
      - ./backend/prisma:/app/backend/prisma
      
      # 共有型定義の参照
      - types_dist:/app/node_modules/@test-ai-search-assistant/types/dist:ro
      
      # ログファイルの永続化
      - backend_logs:/app/logs
      
      # 設定ファイル（読み書き可能に変更）
      - ./backend/tsconfig.json:/app/backend/tsconfig.json
      - ./backend/package.json:/app/backend/package.json
      
      # node_modulesキャッシュ（パフォーマンス向上）
      - /app/backend/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      types:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/v1/health"]
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - app-network

  # フロントエンドWebアプリケーション
  frontend:
    build:
      context: .
      dockerfile: ./frontend/Dockerfile.dev
    container_name: test-ai-search-frontend
    restart: unless-stopped
    environment:
      # 基本設定
      NODE_ENV: development
      PORT: 3000
      SERVICE_NAME: frontend
      
      # Next.js設定
      NEXT_TELEMETRY_DISABLED: 1
      WATCHPACK_POLLING: true
      
      # API接続設定
      NEXT_PUBLIC_API_URL: http://localhost:3001/api/v1
      NEXT_PUBLIC_WS_URL: ws://localhost:3001
      NEXT_PUBLIC_APP_NAME: ${NEXT_PUBLIC_APP_NAME:-AI検索アシスタント}
    ports:
      - "3000:3000"
    volumes:
      # ソースコードのホットリロード（frontendディレクトリをワーキングディレクトリに）
      - ./frontend/src:/app/frontend/src:ro
      
      # 共有型定義の参照
      - types_dist:/app/node_modules/@test-ai-search-assistant/types/dist:ro
    depends_on:
      backend:
        condition: service_healthy
      types:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 45s
    networks:
      - app-network

  # Nginx リバースプロキシ
  nginx:
    build:
      context: .docker/nginx/dev
      dockerfile: Dockerfile
    container_name: test-ai-search-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # ログファイル
      - nginx_logs:/var/log/nginx
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

# 名前付きボリューム定義
volumes:
  # データベース関連
  postgres_data:
    driver: local
  postgres_backups:
    driver: local
  
  # キャッシュ関連
  redis_data:
    driver: local
  
  # アプリケーション関連
  types_dist:
    driver: local
  backend_logs:
    driver: local
  frontend_next:
    driver: local
  
  # Webサーバー関連
  nginx_logs:
    driver: local

# ネットワーク定義
networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/16
          gateway: 172.21.0.1
    driver_opts:
      com.docker.network.bridge.name: ai-search-br0
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.driver.mtu: 1500
